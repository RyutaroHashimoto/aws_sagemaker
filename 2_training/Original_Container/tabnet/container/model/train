#!/usr/bin/env python

from __future__ import print_function

import json
import logging
import os
import sys
import traceback

import numpy as np
import pandas as pd
import torch
from model import TabNet_Regressor, TabNet_PreTrainer
from sklearn.metrics import mean_squared_error

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = os.path.join(prefix, 'input/data')
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# File mode, the input files are copied to the directory specified here.
channel_name = 'training'
training_path = os.path.join(input_path, channel_name)

# ログ出力用
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.StreamHandler(sys.stdout))


def save_model(model, model_dir):
    logger.info("Saving the model.")
    path = os.path.join(model_dir, 'model.pt')
    model.save_model(path)


# The function to execute the training.
def train():
    logger.info('Starting the training.')

    # set seed
    torch.manual_seed(42)
    torch.cuda.manual_seed_all(42)
    torch.backends.cudnn.deterministic = True
    np.random.seed(42)

    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)
        # 入れ子の辞書は文字列にされてしまうのでjson.loadsで再度辞書にする
        logger.info(trainingParams)

        # read data
        df_train = pd.read_csv(training_path + json.loads(trainingParams['input'])['train_data'], index_col=0)
        df_valid = pd.read_csv(training_path + json.loads(trainingParams['input'])['valid_data'], index_col=0)

        # formatting for TabNet
        X_train, y_train = df_train.drop(trainingParams['target'], axis=1), df_train[[trainingParams['target']]]
        X_valid, y_valid = df_valid.drop(trainingParams['target'], axis=1), df_valid[[trainingParams['target']]]

        # class num
        feature_col = [col for col in df_train.columns.tolist()]
        trainingParams['categorical-columns'] = trainingParams['categorical-columns'].split()
        categorical_columns = trainingParams['categorical-columns']
        categorical_dims = {}

        for col in categorical_columns:
            categorical_dims[col] = X_train[col].nunique()
        cat_idxs = [i for i, f in enumerate(feature_col) if f in categorical_columns]
        cat_dims = [categorical_dims[f] for i, f in enumerate(feature_col) if f in categorical_columns]

        # pretrain
        pretrainer = TabNet_PreTrainer(json.loads(trainingParams['params-pretrain']))
        pretrainer.fit(X_train)

        # train
        params = {
            'cat_idxs': cat_idxs,
            'cat_dims': cat_dims,
            'from_unsupervised': pretrainer.model,
        }

        params = {**json.loads(trainingParams['params']), **params}

        model = TabNet_Regressor(params)
        # fitting
        model.fit(X_train, y_train, X_valid, y_valid)
        # predicting
        predict = model.predict(X_valid)
        # scoring
        rmse = mean_squared_error(y_valid, list(predict)) ** (1 / 2)
        print('rmse: {}'.format(rmse))

        # save the model
        save_model(model, model_path)

        logger.info('Training complete.')


    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        logger.info('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
